{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["HeroSection","React","createElement","className","TodoItem","_ref","item","toggleTask","deleteTask","concat","completed","onClick","id","text","App","tasks","setTasks","useState","inputValue","setInputValue","taskId","prevTasks","map","task","filter","type","value","onChange","event","target","placeholder","addTask","trim","Date","now","key","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"0LAGA,SAASA,IACP,OACEC,IAAAC,cAAA,OAAKC,UAAU,QACbF,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAA,SAAG,sDAKT,SAASE,EAAQC,GAAmC,IAAlCC,KAAEA,EAAIC,WAAEA,EAAUC,WAAEA,GAAYH,EAChD,OACEJ,IAAAC,cAAA,MAAIC,UAAS,QAAAM,OAAUH,EAAKI,UAAY,YAAc,KACpDT,IAAAC,cAAA,QAAMS,QAASA,IAAMJ,EAAWD,EAAKM,KAAMN,EAAKO,MAChDZ,IAAAC,cAAA,UAAQS,QAASA,IAAMH,EAAWF,EAAKM,KAAK,WAiEnCE,MA5Df,WACE,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAYC,GAAiBF,mBAAS,IAoBvCV,EAAca,IAClBJ,EAAUK,GACRA,EAAUC,IAAKC,GACbA,EAAKX,KAAOQ,EAAS,IAAKG,EAAMb,WAAYa,EAAKb,WAAca,KAK/Df,EAAcY,IAClBJ,EAAUK,GAAcA,EAAUG,OAAQD,GAASA,EAAKX,KAAOQ,KAGjE,OACEnB,IAAAC,cAAA,OAAKC,UAAU,OACbF,IAAAC,cAACF,EAAW,MACZC,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,SACEuB,KAAK,OACLC,MAAOR,EACPS,SArCmBC,IACzBT,EAAcS,EAAMC,OAAOH,QAqCrBI,YAAY,oBAEd7B,IAAAC,cAAA,UAAQS,QApCEoB,KACY,KAAtBb,EAAWc,SACbhB,EAAS,IACJD,EACH,CACEH,GAAIqB,KAAKC,MACTrB,KAAMK,EACNR,WAAW,KAGfS,EAAc,OA0Bc,aAE5BlB,IAAAC,cAAA,UACGa,EAAMO,IAAKC,GACVtB,IAAAC,cAACE,EAAQ,CACP+B,IAAKZ,EAAKX,GACVN,KAAMiB,EACNhB,WAAYA,EACZC,WAAYA,QC7DT4B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAKpC,IAAiD,IAAhDsC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,OAAEA,EAAMC,QAAEA,GAAS1C,EACpEsC,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHnD,IAAAC,cAACD,IAAMoD,WAAU,KACfpD,IAAAC,cAACY,EAAG,QAORsB","file":"static/js/main.95d26ff4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nfunction HeroSection() {\r\n  return (\r\n    <div className=\"hero\">\r\n      <h1>Todo List</h1>\r\n      <p>Make every day a step forward towards your goals!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction TodoItem({ item, toggleTask, deleteTask }) {\r\n  return (\r\n    <li className={`task ${item.completed ? 'completed' : ''}`}>\r\n      <span onClick={() => toggleTask(item.id)}>{item.text}</span>\r\n      <button onClick={() => deleteTask(item.id)}>Delete</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const addTask = () => {\r\n    if (inputValue.trim() !== '') {\r\n      setTasks([\r\n        ...tasks,\r\n        {\r\n          id: Date.now(),\r\n          text: inputValue,\r\n          completed: false,\r\n        },\r\n      ]);\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  const toggleTask = (taskId) => {\r\n    setTasks((prevTasks) =>\r\n      prevTasks.map((task) =>\r\n        task.id === taskId ? { ...task, completed: !task.completed } : task\r\n      )\r\n    );\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    setTasks((prevTasks) => prevTasks.filter((task) => task.id !== taskId));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HeroSection />\r\n      <div className=\"input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Enter a task...\"\r\n        />\r\n        <button onClick={addTask}>Add Task</button>\r\n      </div>\r\n      <ul>\r\n        {tasks.map((task) => (\r\n          <TodoItem\r\n            key={task.id}\r\n            item={task}\r\n            toggleTask={toggleTask}\r\n            deleteTask={deleteTask}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}